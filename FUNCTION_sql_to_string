create or replace FUNCTION "SQL_TO_STRING" 
(
  P_SQL IN VARCHAR2 
, P_COLSEPARATOR IN VARCHAR2 DEFAULT ':'
, P_ROWSEPARATOR IN VARCHAR2 DEFAULT ','
) RETURN CLOB AS 
   V_HTML VARCHAR2(4000);
   V_NUMBER NUMBER;
   V_VARCHAR2 VARCHAR2(2000);
   V_COLS NUMBER;
   V_TABCOLUMNS DBMS_SQL.DESC_TAB2;
   V_CURSOR NUMBER;
   V_HEADER VARCHAR2(32000);
   V_ROW VARCHAR2(32000);
   V_ROWS VARCHAR2(32000);
   V_EXEC NUMBER;
   V_RESULT CLOB;
   V_COLUMNS APEX_APPLICATION_GLOBAL.VC_ARR2;
   V_OLDVALUES APEX_APPLICATION_GLOBAL.VC_ARR2;
   V_FIRST NUMBER;
   V_VALUE VARCHAR2(2000);
   V_ALIGN VARCHAR(200);
   V_AUX VARCHAR(32000);
   V_LABEL VARCHAR2(2000);
BEGIN

   -- CODED BY @jesusmoreno, JESUS MORENO DIAZ
   -- http://www.linkedin.com/in/jesusmoreno24
   -- TECNICA24, http://www.tecnica24.es
   
   -- RESULT
   V_RESULT := '';

   -- PARSE SQL COLUMNS
   V_CURSOR := DBMS_SQL.OPEN_CURSOR;
   DBMS_SQL.PARSE(V_CURSOR, P_SQL, DBMS_SQL.NATIVE);
   DBMS_SQL.DESCRIBE_COLUMNS2(V_CURSOR,V_COLS,V_TABCOLUMNS);
   FOR I IN 1..V_COLS
   LOOP
      IF V_TABCOLUMNS(I).COL_TYPE = DBMS_TYPES.TYPECODE_NUMBER THEN
         DBMS_SQL.DEFINE_COLUMN(V_CURSOR,I,V_NUMBER);
      ELSIF V_TABCOLUMNS(I).COL_TYPE = DBMS_TYPES.TYPECODE_VARCHAR2  THEN
         DBMS_SQL.DEFINE_COLUMN(V_CURSOR,I,V_VARCHAR2, 2000);
      ELSIF V_TABCOLUMNS(I).COL_TYPE = DBMS_TYPES.TYPECODE_VARCHAR  THEN
         DBMS_SQL.DEFINE_COLUMN(V_CURSOR,I,V_VARCHAR2, 2000);
      ELSE
         DBMS_SQL.DEFINE_COLUMN(V_CURSOR,I,V_VARCHAR2, 200);
      END IF; 
   END LOOP;

   -- ROWS
   V_EXEC := DBMS_SQL.EXECUTE(V_CURSOR);
   WHILE DBMS_SQL.FETCH_ROWS(V_CURSOR)>0
   LOOP
      V_ROW := '';
      FOR I IN 1..V_COLS
      LOOP
         -- NUMBER
         IF V_TABCOLUMNS(I).COL_TYPE = DBMS_TYPES.TYPECODE_NUMBER THEN
            DBMS_SQL.COLUMN_VALUE(V_CURSOR,I,V_NUMBER);
            V_VALUE := TO_CHAR(V_NUMBER);
         -- VARCHAR2
         ELSIF V_TABCOLUMNS(I).COL_TYPE = DBMS_TYPES.TYPECODE_VARCHAR2 THEN
            DBMS_SQL.COLUMN_VALUE(V_CURSOR,I,V_VARCHAR2);
            V_VALUE := V_VARCHAR2;
         -- VARCHAR
         ELSIF V_TABCOLUMNS(I).COL_TYPE = DBMS_TYPES.TYPECODE_VARCHAR THEN
            DBMS_SQL.COLUMN_VALUE(V_CURSOR,I,V_VARCHAR2);
            V_VALUE := V_VARCHAR2;
         -- CHAR
         ELSIF V_TABCOLUMNS(I).COL_TYPE = DBMS_TYPES.TYPECODE_CHAR THEN
            DBMS_SQL.COLUMN_VALUE(V_CURSOR,I,V_VARCHAR2);
            V_VALUE := V_VARCHAR2;
         ELSE
            V_VALUE := V_TABCOLUMNS(I).COL_TYPE;
         END IF;

         -- ADD COL TO ROW   
         V_ROW := V_ROW || CASE WHEN V_ROW IS NOT NULL THEN P_COLSEPARATOR ELSE '' END || TRIM(V_VALUE);

      END LOOP;

      -- ADD ROW   
      V_RESULT := V_RESULT || CASE WHEN V_RESULT IS NOT NULL THEN P_ROWSEPARATOR ELSE '' END || V_ROW;

   END LOOP;
   DBMS_SQL.CLOSE_CURSOR(V_CURSOR);

   -- RESULT
   RETURN V_RESULT;

END SQL_TO_STRING;
